// Generated by CoffeeScript 1.4.0
var Index;

Index = Index || {};

Index.Gallery = (function(Gallery, $) {
  Gallery.manage = (function() {
    var bindCropEvents, bindEvents, fileUploadEvents, getImages, removeLine, renderImages, renderLine, triggerCropForm, uiBlocker, __cancelCropButton, __cropForm, __cropImage, __cropModal, __defaultOrder, __entityId, __fancyboxClass, __fileUploadButton, __fileUploadForm, __fileUploadInput, __fileUploadThumbnail, __galleryContainer, __galleryControls, __imageDeleteButton, __imagesCount, __imagesTable, __saveCropButton, __trEmpty, __trTemplate, __uiBlock, _hideProgressBar, _showProgressBar, _updateCropCoords;
    __galleryContainer = '.gallery';
    __galleryControls = $(__galleryContainer).find('.gallery-controls')[0];
    __fileUploadForm = '#fileupload-form';
    __fileUploadInput = '#fileupload-input';
    __fileUploadButton = '.fileinput-button';
    __fileUploadThumbnail = '.fileupload-thumbnail';
    __cropModal = '';
    __saveCropButton = '.btn-save-crop';
    __cancelCropButton = '.btn-cancel-crop';
    __cropForm = 'form.crop-form';
    __cropImage = 'img.jcrop-image';
    __imagesCount = 0;
    __defaultOrder = 1;
    __imagesTable = $(__galleryContainer).find('.gallery-images-table tbody')[0];
    __imageDeleteButton = '.btn-delete-image';
    __trTemplate = '<tr><td><input type="hidden" name="imagens[{{image.index}}][path]" class="fileupload-hidden" value="{{image.path}}"><a href="{{image.src}}" class="thumbnail-fancybox"><img src="{{image.src}}" class="fileupload-thumbnail span2 thumbnail"></a></td><td><input type="text" class="input-small" name="imagens[{{image.index}}][ordem]" value="{{image.order}}"/></td><td><input type="checkbox" name="imagens[{{image.index}}][destaque]" value="1" {{image.destaque}}/></td><td><span class="btn btn-danger btn-delete-image">Deletar</span></td></tr>';
    __trEmpty = '<tr><td colspan="4">Nenhuma imagem cadastrada</td></tr>';
    __entityId = '#entity-id';
    __uiBlock = false;
    __fancyboxClass = '.thumbnail-fancybox';
    getImages = function() {
      return $.ajax({
        url: Index.ajaxUrl,
        type: 'POST',
        dataType: 'json',
        data: {
          ajaxAction: 'getImages',
          id: $(__entityId).val()
        },
        beforeSend: function() {
          return uiBlocker();
        }
      }).done(function(data) {
        if (!(data instanceof Object) || data.success === false || data.result.images.length <= 0) {
          return false;
        }
        return renderImages(data.result.images);
      }).always(function() {
        return uiBlocker();
      });
    };
    renderImages = function(images) {
      var image, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = images.length; _i < _len; _i++) {
        image = images[_i];
        _results.push(renderLine(image.src, image.path, image.ordem, image.destaque));
      }
      return _results;
    };
    renderLine = function(src, path, order, destaque) {
      var html;
      if (order == null) {
        order = __defaultOrder;
      }
      if (destaque == null) {
        destaque = false;
      }
      html = __trTemplate;
      html = html.replace(/{{image\.index}}/g, __imagesCount);
      html = html.replace(/{{image\.path}}/g, path);
      html = html.replace(/{{image\.src}}/g, src);
      html = html.replace(/{{image\.order}}/g, order);
      if (destaque === true) {
        html = html.replace(/{{image\.destaque}}/g, 'checked="checked"');
      } else {
        html = html.replace(/{{image\.destaque}}/g, '');
      }
      if (__imagesCount === 0) {
        $(__imagesTable).html('');
      }
      __imagesCount++;
      return $(__imagesTable).append(html);
    };
    removeLine = function(element) {
      __imagesCount--;
      $(element).parents('tr').remove();
      if (__imagesCount <= 0) {
        return $(__imagesTable).html(__trEmpty);
      }
    };
    fileUploadEvents = function() {
      $(__galleryControls).find(__fileUploadButton).bind('click', function() {
        return $(__fileUploadForm).find(__fileUploadInput).click();
      });
      return $(__fileUploadForm).fileupload({
        dataType: 'json',
        acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
        add: function(e, data) {
          return data.submit();
        },
        progressall: function(e, data) {
          var progress, progressBar;
          progressBar = _showProgressBar();
          progress = parseInt(data.loaded / data.total * 100, 10);
          if (progressBar !== false) {
            return $(progressBar).children('.bar').css('width', progress + '%');
          }
        },
        done: function(e, data) {
          _hideProgressBar();
          return triggerCropForm(data.result);
        }
      });
    };
    _showProgressBar = function() {
      var progressBar;
      progressBar = $(__galleryControls).find('.progress');
      if (progressBar.length === 0) {
        return false;
      }
      $(progressBar).removeClass('fade');
      return progressBar;
    };
    _hideProgressBar = function() {
      var progressBar;
      progressBar = $(__galleryControls).find('.progress');
      if (progressBar.length > 0) {
        return $(progressBar).addClass('fade');
      }
    };
    triggerCropForm = function(data) {
      var modal;
      if (!(data instanceof Object)) {
        return false;
      }
      if (data.success === false) {
        return Index.modals.showAlert(data.message);
      }
      modal = $(Index.modals.widgetCrop);
      $('#modalBody', modal).html(data.result.body);
      $('#modalLabel', modal).html(data.result.label);
      __cropModal = modal;
      $(__cropModal).find('.max_height').val(crop_height);
      $(__cropModal).find('.max_width').val(crop_width);
      $(__cropModal).find(__cropImage).Jcrop({
        onChange: _updateCropCoords,
        onSelect: _updateCropCoords,
        aspectRatio: crop_width / crop_height,
        minSize: [crop_width, crop_height],
        setSelect: [0, 0, crop_width, crop_height]
      }, function() {
        $(__cropModal).modal();
        return $(__cropModal).on('hidden', function() {
          return $(this).remove('.modal');
        });
      });
      bindCropEvents();
      return $(__cropModal).find(__cropForm).ajaxForm({
        beforeSubmit: function() {
          return uiBlocker();
        },
        success: function(data) {
          uiBlocker();
          if (!(data instanceof Object)) {
            return false;
          }
          if (data.success === false) {
            return Index.modals.showAlert(data.message);
          }
          $(__cropModal).modal('hide');
          return renderLine(data.result.image, data.result.image_path);
        },
        error: function() {
          return $.unblockUI();
        }
      });
    };
    bindCropEvents = function() {
      $(__cropModal).find(__cancelCropButton).bind('click', function() {
        return $(__cropModal).modal('hide');
      });
      return $(__cropModal).find(__saveCropButton).bind('click', function() {
        return $(__cropModal).find(__cropForm).submit();
      });
    };
    _updateCropCoords = function(coords) {
      $(__cropModal).find('.x_d').val(coords.x);
      $(__cropModal).find('.y_d').val(coords.y);
      $(__cropModal).find('.w_sel').val(coords.w);
      return $(__cropModal).find('.h_sel').val(coords.h);
    };
    uiBlocker = function() {
      if (!__uiBlock) {
        $.blockUI({
          baseZ: 2000,
          css: {
            border: 'none',
            padding: '15px',
            backgroundColor: '#000',
            '-webkit-border-radius': '10px',
            '-moz-border-radius': '10px',
            opacity: .5,
            color: '#fff'
          },
          message: 'Aguarde...'
        });
        return __uiBlock = true;
      } else {
        $.unblockUI();
        return __uiBlock = false;
      }
    };
    bindEvents = function() {
      fileUploadEvents();
      $(__imageDeleteButton).live('click', function() {
        return removeLine($(this));
      });
      return $(__fancyboxClass).fancybox();
    };
    return {
      init: function() {
        getImages();
        return bindEvents();
      }
    };
  })();
  return Gallery;
})(Index.Gallery || {}, jQuery);

jQuery(function() {
  return Index.Gallery.manage.init();
});
